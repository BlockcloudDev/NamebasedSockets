From dd4e0bd11f47263a7167eb98848a15b955647dd0 Mon Sep 17 00:00:00 2001
From: Juan Lang <juan.lang@ericsson.com>
Date: Thu, 10 Sep 2009 13:50:50 -0700
Subject: [PATCH 42/67] Implement accept

---
 net/namestack/af_name.c |  169 +++++++++++++++++++++++++++++++++++++++++++++--
 1 files changed, 162 insertions(+), 7 deletions(-)

diff --git a/net/namestack/af_name.c b/net/namestack/af_name.c
index 880ff22..946e64c 100644
--- a/net/namestack/af_name.c
+++ b/net/namestack/af_name.c
@@ -4,6 +4,7 @@
 #include <linux/net.h>
 #include <linux/module.h>
 #include <net/sock.h>
+#include <net/inet_connection_sock.h>
 #include <net/tcp_states.h>
 #include <linux/inname.h>
 #include "dns.h"
@@ -130,7 +131,8 @@ static int name_bind_ipv6(struct socket *sock, const char *fqdn, __be16 port,
 	return kernel_bind(sock, (struct sockaddr *)&sin, sizeof(sin));
 }
 
-static int name_create_v6_sock(int type, int protocol, struct socket **sock)
+static int name_create_v6_sock(int type, int protocol, struct socket **sock,
+			       struct name_stream_sock *name)
 {
 	int err = sock_create_kern(PF_INET6, type, protocol, sock);
 
@@ -140,13 +142,22 @@ static int name_create_v6_sock(int type, int protocol, struct socket **sock)
 		err = kernel_setsockopt(*sock, IPPROTO_IPV6, IPV6_V6ONLY,
 					(char *)&on, sizeof(on));
 	}
+	if (!err) {
+		(*sock)->sk->sk_user_data = name;
+		(*sock)->sk->sk_state_change = name_stream_state_change;
+	}
 	return err;
 }
 
-static int name_create_v4_sock(int type, int protocol, struct socket **sock)
+static int name_create_v4_sock(int type, int protocol, struct socket **sock,
+			       struct name_stream_sock *name)
 {
 	int err = sock_create_kern(PF_INET, type, protocol, sock);
 
+	if (!err) {
+		(*sock)->sk->sk_user_data = name;
+		(*sock)->sk->sk_state_change = name_stream_state_change;
+	}
 	return err;
 }
 
@@ -167,13 +178,13 @@ static int name_bind_to_fqdn(struct name_stream_sock *name, const char *fqdn,
 	if (name->sname.sname_port) {
 		if (!name->ipv6_sock) {
 			err = name_create_v6_sock(SOCK_STREAM, 0,
-						  &name->ipv6_sock);
+						  &name->ipv6_sock, name);
 			if (err)
 				goto out;
 		}
 		if (!name->ipv4_sock) {
 			err = name_create_v4_sock(SOCK_STREAM, 0,
-						  &name->ipv4_sock);
+						  &name->ipv4_sock, name);
 			if (err)
 				goto out;
 		}
@@ -663,6 +674,148 @@ out:
 	return err;
 }
 
+static int name_stream_wait_for_accept(struct socket *sock, long timeo)
+{
+	struct sock *sk = sock->sk;
+	DEFINE_WAIT(wait);
+
+	prepare_to_wait(sk->sk_sleep, &wait, TASK_INTERRUPTIBLE);
+	while ((1 << sk->sk_state) & NAMEF_LISTEN) {
+		release_sock(sk);
+		timeo = schedule_timeout(timeo);
+		lock_sock(sk);
+		if (signal_pending(current) || !timeo)
+			break;
+		prepare_to_wait(sk->sk_sleep, &wait, TASK_INTERRUPTIBLE);
+	}
+	finish_wait(sk->sk_sleep, &wait);
+	return timeo;
+}
+
+static struct sock *name_alloc_stream_socket(struct net *net,
+					     struct socket *sock);
+
+static struct socket *create_stream_sock_from_sk(int pf, struct sock *sk)
+{
+	int err;
+	struct socket *sock = NULL;
+
+	err = sock_create_kern(pf, SOCK_STREAM, 0, &sock);
+	if (err)
+		goto out;
+	sock_orphan(sock->sk);
+	sock_graft(sk, sock);
+out:
+	return sock;
+}
+
+static int name_stream_accept(struct socket *sock, struct socket *newsock,
+			      int flags)
+{
+	struct sock *sk = sock->sk, *v6_sk, *v4_sk;
+	struct sock *new_v6_sk = NULL, *new_v4_sk = NULL, *incoming_sock;
+	struct inet_connection_sock *v6_icsk, *v4_icsk;
+	struct name_stream_sock *name = name_stream_sk(sk), *new_name;
+	int err;
+
+	lock_sock(sk);
+	/* This handles accepting connections on two incoming sockets, the IPv6
+	 * and the IPv4 socket.  Rather than call kernel_accept on each one,
+	 * call each one's sk_prot->accept in non-blocking mode, and wait until
+	 * one of them has accepted.
+	 * We "know" that each of them has an sk_prot->accept method, because
+	 * they are one of AF_INET or AF_INET6 sockets:  see inet_accept, used
+	 * by both, in ipv4/af_inet.c.
+	 */
+	err = -EINVAL;
+	if (!name->ipv6_sock || !name->ipv6_sock->sk->sk_prot->accept)
+		goto out_err;
+	if (!name->ipv4_sock || !name->ipv4_sock->sk->sk_prot->accept)
+		goto out_err;
+
+	err = -EAGAIN;
+	new_v6_sk = name->ipv6_sock->sk->sk_prot->accept(name->ipv6_sock->sk,
+							 O_NONBLOCK, &err);
+	if (unlikely(new_v6_sk))
+		goto handle_incoming;
+	if (err != -EAGAIN)
+		goto out_err;
+	new_v4_sk = name->ipv4_sock->sk->sk_prot->accept(name->ipv4_sock->sk,
+							 O_NONBLOCK, &err);
+	if (unlikely(new_v4_sk))
+		goto handle_incoming;
+	if (err != -EAGAIN)
+		goto out_err;
+
+	sk->sk_state = NAME_LISTEN;
+
+	v6_sk = name->ipv6_sock->sk;
+	v6_icsk = inet_csk(v6_sk);
+	v4_sk = name->ipv4_sock->sk;
+	v4_icsk = inet_csk(v4_sk);
+
+	if (reqsk_queue_empty(&v6_icsk->icsk_accept_queue) &&
+	    reqsk_queue_empty(&v4_icsk->icsk_accept_queue)) {
+		long timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);
+
+		err = -EAGAIN;
+		if (!timeo)
+			goto out_wait_err;
+		release_sock(sk);
+		err = name_stream_wait_for_accept(sock, timeo);
+		if (err)
+			goto out_wait_err;
+	}
+	if (!reqsk_queue_empty(&v6_icsk->icsk_accept_queue))
+		new_v6_sk = reqsk_queue_get_child(&v6_icsk->icsk_accept_queue,
+						  v6_sk);
+	else if (!reqsk_queue_empty(&v4_icsk->icsk_accept_queue))
+		new_v4_sk = reqsk_queue_get_child(&v4_icsk->icsk_accept_queue,
+						  v4_sk);
+	release_sock(sk);
+
+handle_incoming:
+	err = -ENOMEM;
+	incoming_sock = name_alloc_stream_socket(&init_net, newsock);
+	if (!incoming_sock) {
+		if (new_v6_sk)
+			sock_put(new_v6_sk);
+		if (new_v4_sk)
+			sock_put(new_v4_sk);
+		goto out_err;
+	}
+	new_name = name_stream_sk(incoming_sock);
+	memcpy(&new_name->sname, &name->sname, sizeof(name->sname));
+	if (new_v6_sk) {
+		new_name->ipv6_sock = create_stream_sock_from_sk(PF_INET6,
+								 new_v6_sk);
+		if (!new_name->ipv6_sock) {
+			sock_put(incoming_sock);
+			goto out_err;
+		}
+	}
+	if (new_v4_sk) {
+		new_name->ipv4_sock = create_stream_sock_from_sk(PF_INET,
+								 new_v4_sk);
+		if (!new_name->ipv4_sock) {
+			sock_put(incoming_sock);
+			goto out_err;
+		}
+	}
+	sock_graft(incoming_sock, newsock);
+	newsock->state = SS_CONNECTED;
+	err = 0;
+	release_sock(sk);
+	return err;
+
+out_wait_err:
+	release_sock(sk);
+
+out_err:
+	release_sock(sk);
+	return err;
+}
+
 static int name_stream_listen(struct socket *sock, int backlog)
 {
 	struct sock *sk = sock->sk;
@@ -677,12 +830,14 @@ static int name_stream_listen(struct socket *sock, int backlog)
 	 * what does backlog mean?
 	 */
 	if (!name->ipv6_sock) {
-		err = name_create_v6_sock(SOCK_STREAM, 0, &name->ipv6_sock);
+		err = name_create_v6_sock(SOCK_STREAM, 0, &name->ipv6_sock,
+					  name);
 		if (err)
 			goto out;
 	}
 	if (!name->ipv4_sock) {
-		err = name_create_v4_sock(SOCK_STREAM, 0, &name->ipv4_sock);
+		err = name_create_v4_sock(SOCK_STREAM, 0, &name->ipv4_sock,
+					  name);
 		if (err)
 			goto out;
 	}
@@ -702,7 +857,7 @@ static const struct proto_ops name_stream_ops = {
 	.bind = name_stream_bind,
 	.connect = name_stream_connect,
 	.socketpair = sock_no_socketpair,
-	.accept = sock_no_accept,
+	.accept = name_stream_accept,
 	.getname = sock_no_getname,
 	.poll = sock_no_poll,
 	.ioctl = sock_no_ioctl,
-- 
1.6.3.2

