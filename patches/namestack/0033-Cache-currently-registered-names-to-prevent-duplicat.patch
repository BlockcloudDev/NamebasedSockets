From e4bfb810dc986338b61508e1a1f8168415d6a654 Mon Sep 17 00:00:00 2001
From: Juan Lang <juan.lang@ericsson.com>
Date: Thu, 10 Sep 2009 13:48:30 -0700
Subject: [PATCH] Cache currently registered names to prevent duplicate names from being registered

---
 Makefile         |    2 +-
 af_name.c        |   33 +++++---------
 main.c           |    3 +
 namecache.c      |  127 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 namestack_priv.h |   27 +++++++++++
 5 files changed, 169 insertions(+), 23 deletions(-)
 create mode 100644 namecache.c

diff --git a/Makefile b/Makefile
index 3eff6af..0f2f774 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 obj-m += namestack.o
-namestack-objs := main.o af_name.o dns.o
+namestack-objs := main.o af_name.o dns.o namecache.o
 
 # ordinary compiles:
 #KERN_BUILD := /lib/modules/$(shell uname -r)/build
diff --git a/af_name.c b/af_name.c
index e1c8580..88ea132 100644
--- a/af_name.c
+++ b/af_name.c
@@ -28,24 +28,6 @@ enum {
 	NAMEF_ESTABLISHED = (1 << NAME_ESTABLISHED),
 };
 
-struct name_stream_sock
-{
-	struct sock sk;
-	struct sockaddr_name sname;
-	struct sockaddr_name dname;
-	u_char *dname_answer;
-	int dname_answer_len;
-	uint16_t dname_answer_index;
-	int async_error;
-	struct socket *ipv4_sock;
-	struct socket *ipv6_sock;
-};
-
-static inline struct name_stream_sock *name_stream_sk(const struct sock *sk)
-{
-	return (struct name_stream_sock *)sk;
-}
-
 static void name_stream_state_change(struct sock *sk)
 {
 	struct name_stream_sock *name;
@@ -98,8 +80,10 @@ static int name_stream_release(struct socket *sock)
 		name->dname_answer_len = 0;
 		name->dname_answer_index = 0;
 	}
-	if (name->sname.sname_addr.name[0])
+	if (name->sname.sname_addr.name[0]) {
+		name_cache_delete(name->sname.sname_addr.name);
 		name_delete_registration(name->sname.sname_addr.name);
+	}
 	if (name->ipv6_sock) {
 		kernel_sock_shutdown(name->ipv6_sock, SHUT_WR);
 		sock_release(name->ipv6_sock);
@@ -121,12 +105,10 @@ out:
 
 static void name_bind_to_fqdn(struct name_stream_sock *name, const char *fqdn)
 {
-	/* FIXME: need to check if the name is already registered */
 	/* FIXME: need attempt to bind to the specified port on each
 	 * transport socket.
 	 */
 	printk(KERN_INFO "bound to %s\n", fqdn);
-	strcpy(name->sname.sname_addr.name, fqdn);
 }
 
 static void name_register_cb(int result, const char *bound_name, void *data)
@@ -148,11 +130,18 @@ static int name_register(struct socket *sock, const char *fully_qualified_name)
 	int err;
 
 	printk(KERN_INFO "name qualified as %s\n", fully_qualified_name);
+	strcpy(name->sname.sname_addr.name, fully_qualified_name);
+	err = name_cache_add(fully_qualified_name, sock);
+	if (err)
+		goto out;
 	/* FIXME: need to select addresses to register for name */
 	err = name_send_registration(fully_qualified_name,
 				     name_register_cb, sock);
 	if (err)
-	{
+		name_cache_delete(fully_qualified_name);
+
+out:
+	if (err) {
 		name->async_error = -err;
 		sk->sk_state &= ~NAMEF_BINDING;
 		sk->sk_state_change(sk);
diff --git a/main.c b/main.c
index 2f2bdcb..4c7bfdf 100644
--- a/main.c
+++ b/main.c
@@ -327,11 +327,14 @@ static __init int namestack_init(void)
 		return -ENOMEM;
 	}
 	rc = name_af_init();
+	if (!rc)
+		rc = name_cache_init();
 	return rc;
 }
 
 static void __exit namestack_exit(void)
 {
+	name_cache_free();
 	name_af_exit();
 	netlink_kernel_release(nls);
 	/* Only after no new requests can be received is it safe to free the
diff --git a/namecache.c b/namecache.c
new file mode 100644
index 0000000..b9d0298
--- /dev/null
+++ b/namecache.c
@@ -0,0 +1,127 @@
+#include <linux/types.h>
+#include <linux/socket.h>
+#include <net/sock.h>
+#include <linux/jhash.h>
+#include <linux/list.h>
+#include <linux/inname.h>
+#include "namestack_priv.h"
+
+struct name_sock_list
+{
+	struct list_head entry;
+	struct socket *sock;
+};
+
+static u32 name_cache_shift;
+#define name_cache_size (1 << name_cache_shift)
+static struct name_sock_list *name_cache;
+static DEFINE_SPINLOCK(name_cache_lock);
+
+static inline void lock_name_cache(void)
+{
+	spin_lock(&name_cache_lock);
+}
+
+static inline void unlock_name_cache(void)
+{
+	spin_unlock(&name_cache_lock);
+}
+
+int name_cache_init(void)
+{
+	int err;
+
+	name_cache_shift = 4;
+	name_cache = kmalloc(name_cache_size * sizeof(struct name_sock_list),
+			     GFP_ATOMIC);
+	if (name_cache) {
+		int i;
+
+		for (i = 0; i < name_cache_size; i++) {
+			INIT_LIST_HEAD(&name_cache[i].entry);
+			name_cache[i].sock = NULL;
+		}
+		err = 0;
+	}
+	else {
+		/* defensive line to protect against a broken caller */
+		name_cache_shift = 0;
+		err = -ENOMEM;
+	}
+	return err;
+}
+
+static inline u32 name_hash(const char *name)
+{
+	return jhash(name, strlen(name), 0) & (name_cache_size - 1);
+}
+
+static struct name_sock_list *__name_cache_find(const char *name, u32 bucket)
+{
+	struct name_sock_list *ptr;
+
+	list_for_each_entry(ptr, &name_cache[bucket].entry, entry) {
+		struct sock *sk = ptr->sock->sk;
+		struct name_stream_sock *name_sk = name_stream_sk(sk);
+
+		if (!strcmp(name_sk->sname.sname_addr.name, name))
+			return ptr;
+	}
+	return NULL;
+}
+
+int name_cache_add(const char *name, struct socket *sock)
+{
+	int err;
+	u32 bucket = name_hash(name);
+	struct name_sock_list *ptr;
+
+	lock_name_cache();
+	ptr = __name_cache_find(name, bucket);
+	if (ptr) {
+		err = -EALREADY;
+		goto out;
+	}
+	ptr = kmalloc(sizeof(struct name_sock_list), GFP_ATOMIC);
+	if (!ptr) {
+		err = -ENOMEM;
+		goto out;
+	}
+	ptr->sock = sock;
+	INIT_LIST_HEAD(&ptr->entry);
+	list_add_tail(&name_cache[bucket].entry, &ptr->entry);
+	err = 0;
+out:
+	unlock_name_cache();
+	return err;
+}
+
+void name_cache_delete(const char *name)
+{
+	u32 bucket = name_hash(name);
+	struct name_sock_list *ptr;
+
+	lock_name_cache();
+	ptr = __name_cache_find(name, bucket);
+	if (ptr) {
+		list_del(&ptr->entry);
+		kfree(ptr);
+	}
+	unlock_name_cache();
+}
+
+void name_cache_free(void)
+{
+	int i;
+
+	for (i = 0; i < name_cache_size; i++) {
+		struct name_sock_list *itr, *next;
+
+		list_for_each_entry_safe(itr, next, &name_cache[i].entry,
+					 entry) {
+			list_del(&itr->entry);
+			kfree(itr);
+		}
+	}
+	kfree(name_cache);
+}
diff --git a/namestack_priv.h b/namestack_priv.h
index e556d12..ade8f5b 100644
--- a/namestack_priv.h
+++ b/namestack_priv.h
@@ -2,6 +2,27 @@
 #define NAMESTACK_PRIV_H
 
 #include <linux/types.h>
+#include <linux/socket.h>
+#include <net/sock.h>
+#include <linux/inname.h>
+
+struct name_stream_sock
+{
+	struct sock sk;
+	struct sockaddr_name sname;
+	struct sockaddr_name dname;
+	u_char *dname_answer;
+	int dname_answer_len;
+	uint16_t dname_answer_index;
+	int async_error;
+	struct socket *ipv4_sock;
+	struct socket *ipv6_sock;
+};
+
+static inline struct name_stream_sock *name_stream_sk(const struct sock *sk)
+{
+	return (struct name_stream_sock *)sk;
+}
 
 /* Registration/unregistration functions */
 extern int name_af_init(void);
@@ -20,4 +41,10 @@ typedef void (*register_cb)(int result, const char *name, void *data);
 int name_send_registration(const char *name, register_cb cb, void *data);
 void name_delete_registration(const char *name);
 
+/* Name cache functions */
+int name_cache_init(void);
+int name_cache_add(const char *name, struct socket *sock);
+void name_cache_delete(const char *name);
+void name_cache_free(void);
+
 #endif /* NAMESTACK_PRIV_H */
-- 
1.6.0.4

