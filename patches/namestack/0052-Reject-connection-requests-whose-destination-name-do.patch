From 5f4b0ae21331546160501e5d6f5068c810f0b04b Mon Sep 17 00:00:00 2001
From: Juan Lang <juan.lang@ericsson.com>
Date: Thu, 10 Sep 2009 14:09:47 -0700
Subject: [PATCH] Reject connection requests whose destination name doesn't match the listening socket's name

---
 af_name.c        |  144 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 namestack_priv.h |    3 +
 2 files changed, 147 insertions(+), 0 deletions(-)

diff --git a/af_name.c b/af_name.c
index d41d7cf..b10a612 100644
--- a/af_name.c
+++ b/af_name.c
@@ -381,6 +381,140 @@ out:
 	return err;
 }
 
+#if defined(CONFIG_NAMESTACK_MODULE)
+/* Stolen from net/ipv6/exthdrs.c */
+int ipv6_find_tlv(struct sk_buff *skb, int offset, int type)
+{
+	const unsigned char *nh = skb_network_header(skb);
+	int packet_len = skb->tail - skb->network_header;
+	struct ipv6_opt_hdr *hdr;
+	int len;
+
+	if (offset + 2 > packet_len)
+		goto bad;
+	hdr = (struct ipv6_opt_hdr *)(nh + offset);
+	len = ((hdr->hdrlen + 1) << 3);
+
+	if (offset + len > packet_len)
+		goto bad;
+
+	offset += 2;
+	len -= 2;
+
+	while (len > 0) {
+		int opttype = nh[offset];
+		int optlen;
+
+		if (opttype == type)
+			return offset;
+
+		switch (opttype) {
+		case IPV6_TLV_PAD0:
+			optlen = 1;
+			break;
+		default:
+			optlen = nh[offset + 1] + 2;
+			if (optlen > len)
+				goto bad;
+			break;
+		}
+		offset += optlen;
+		len -= optlen;
+	}
+	/* not_found */
+ bad:
+	return -1;
+}
+#endif
+
+static char *rfc1035_decode_name(const u8 *p, int len)
+{
+	const u8 *q;
+	int name_len = 0;
+	char *name = NULL;
+
+	for (q = p; *q && q - p <= len; q += *q + 1)
+		name_len += *q + 1;
+	if (!*q && q - p <= len) {
+		name_len += 1;
+		name = kmalloc(name_len, GFP_ATOMIC);
+		if (name) {
+			char *dst;
+
+			for (q = p, dst = name; *q && q - p <= len;
+			     dst += *q + 1, q += *q + 1) {
+				memcpy(dst, q + 1, *q);
+				dst[*q] = '.';
+			}
+			*dst = 0;
+		}
+	}
+	return name;
+}
+
+static int name_option_matches(struct sk_buff *skb, u16 offset,
+			       const char *name)
+{
+	int matches = 0;
+	const unsigned char *nh = skb_network_header(skb);
+	const struct name_opt_hdr *name_hdr =
+		(const struct name_opt_hdr *)(nh + offset);
+	const u8 *name_ptr = (const u8 *)(name_hdr + 1);
+	char *option_name;
+
+	//assert(name_hdr->type == NAME_OPTION_DEST_NAME);
+	option_name = rfc1035_decode_name(name_ptr,
+					  name_hdr->len);
+	if (option_name) {
+		matches = !strcmp(name, option_name);
+		printk(KERN_INFO "destination name %s %s %s\n", option_name,
+		       matches ? "matches" : "doesn't match", name);
+		kfree(option_name);
+	}
+	return matches;
+}
+
+static struct sock *name_v6_recv_syn(struct sock *sk, struct sk_buff *skb,
+				     struct request_sock *req,
+				     struct dst_entry *dst)
+{
+	struct name_stream_sock *name = sk->sk_user_data;
+	struct sock *ret = NULL;
+	u16 offset;
+	struct ipv6_opt_hdr *exthdr =
+		(struct ipv6_opt_hdr *)(ipv6_hdr(skb) + 1);
+	const unsigned char *nh = skb_network_header(skb);
+	unsigned int packet_len = skb->tail - skb->network_header;
+	u8 *nexthdr;
+	int dest_name_offset = -1;
+
+	nexthdr = &ipv6_hdr(skb)->nexthdr;
+	offset = sizeof(struct ipv6hdr);
+	while (offset + 1 <= packet_len && dest_name_offset == -1) {
+		switch (*nexthdr) {
+		case NEXTHDR_DEST:
+			dest_name_offset = ipv6_find_tlv(skb, offset,
+							 NAME_OPTION_DEST_NAME);
+			break;
+		}
+
+		offset += ipv6_optlen(exthdr);
+		nexthdr = &exthdr->nexthdr;
+		exthdr = (struct ipv6_opt_hdr *)(nh + offset);
+	}
+	/* Only accept if there's no dest name option or if the dest name
+	 * matches our (source) name.
+	 */
+	if (dest_name_offset == -1 ||
+	    name_option_matches(skb, dest_name_offset,
+				name->sname.sname_addr.name))
+		ret = name->orig_syn_recv_sock(sk, skb, req, dst);
+	return ret;
+}
+
+static struct inet_connection_sock_af_ops name_tcp6_af_ops;
+static int name_tcp6_af_ops_init;
+
 static int name_create_v6_sock(int type, int protocol, struct socket **sock,
 			       struct name_stream_sock *name)
 {
@@ -397,8 +531,18 @@ static int name_create_v6_sock(int type, int protocol, struct socket **sock,
 					(char *)&on, sizeof(on));
 	}
 	if (!err) {
+		struct inet_connection_sock *icsk = inet_csk((*sock)->sk);
+
 		(*sock)->sk->sk_user_data = name;
 		(*sock)->sk->sk_state_change = name_stream_state_change;
+		if (!name_tcp6_af_ops_init) {
+			memcpy(&name_tcp6_af_ops, icsk->icsk_af_ops,
+			       sizeof(struct inet_connection_sock_af_ops));
+			name_tcp6_af_ops.syn_recv_sock = name_v6_recv_syn;
+			name_tcp6_af_ops_init = 1;
+		}
+		name->orig_syn_recv_sock = icsk->icsk_af_ops->syn_recv_sock;
+		icsk->icsk_af_ops = &name_tcp6_af_ops;
 	}
 	return err;
 }
diff --git a/namestack_priv.h b/namestack_priv.h
index 0e16eef..f72c651 100644
--- a/namestack_priv.h
+++ b/namestack_priv.h
@@ -17,6 +17,9 @@ struct name_stream_sock
 	int async_error;
 	struct socket *ipv4_sock;
 	struct socket *ipv6_sock;
+	struct sock *(*orig_syn_recv_sock)(struct sock *sk, struct sk_buff *skb,
+					   struct request_sock *req,
+					   struct dst_entry *dst);
 };
 
 static inline struct name_stream_sock *name_stream_sk(const struct sock *sk)
-- 
1.6.0.4

