From a128a98c0756d43253527fed8e7b2fceb8fe42c8 Mon Sep 17 00:00:00 2001
From: Juan Lang <juan.lang@ericsson.com>
Date: Thu, 17 Sep 2009 15:30:25 -0700
Subject: [PATCH 02/21] Add initial support for name registration

---
 main.c |  132 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 132 insertions(+), 0 deletions(-)

diff --git a/main.c b/main.c
index e5ac35d..5f93d26 100644
--- a/main.c
+++ b/main.c
@@ -202,6 +202,133 @@ static void do_query(unsigned int seq, const char *data, size_t len)
 			len);
 }
 
+struct register_data
+{
+	unsigned int seq;
+	char name[MAX_NAME_LEN];
+};
+
+static void *register_thread(void *arg)
+{
+	struct register_data *data = arg;
+	int len, err;
+	struct nlmsghdr *nlh = NULL;
+
+	printf("registering %s (seq %d)\n", data->name, data->seq);
+	res_init();
+	len = strlen(data->name);
+	/* len is guaranteed to be <= MAX_NAME_LEN, see do_register */
+	if (data->name[len - 1] == '.')
+	{
+		char host[MAX_NAME_LEN];
+		const char *dot;
+
+		/* Fully-qualified domain name, find domain */
+		dot = strchr(data->name, '.');
+		/* dot is guaranteed not to be NULL */
+		memcpy(host, data->name, dot - data->name);
+		host[dot - data->name] = 0;
+		printf("fully-qualified name %s in domain %s\n", host, dot + 1);
+		/* FIXME: actually register name, wait for response */
+		err = 0;
+	}
+	else
+	{
+		printf("unqualified name %s, registering in domain %s\n",
+		       data->name, _res.defdname);
+		/* FIXME: actually register name, wait for response */
+		err = 0;
+	}
+
+	nlh = malloc(NLMSG_SPACE(sizeof(int)));
+	if (nlh)
+	{
+		struct sockaddr_nl dest_addr;
+		struct iovec iov;
+		struct msghdr msg;
+
+		/* Send a reply message */
+		memset(&dest_addr, 0, sizeof(dest_addr));
+		dest_addr.nl_family = AF_NETLINK;
+
+		nlh->nlmsg_len = NLMSG_SPACE(sizeof(int));
+		nlh->nlmsg_type = NAME_STACK_REGISTER_REPLY;
+		nlh->nlmsg_flags = 0;
+		nlh->nlmsg_seq = data->seq;
+		nlh->nlmsg_pid = 0;
+		memcpy(NLMSG_DATA(nlh), &err, sizeof(err));
+
+		iov.iov_base = (void *)nlh;
+		iov.iov_len = nlh->nlmsg_len;
+		msg.msg_name = (void *)&dest_addr;
+		msg.msg_namelen = sizeof(dest_addr);
+		msg.msg_iov = &iov;
+		msg.msg_iovlen = 1;
+
+		sendmsg(sock_fd, &msg, 0);
+
+		free(nlh);
+	}
+	free(data);
+}
+
+static void do_register(unsigned int seq, const char *data, size_t len)
+{
+	size_t measured_len;
+
+	printf("got a register request with seq %d for %s (%d)\n", seq, data,
+	       len);
+	/* Sanity-check the name */
+	if (len <= MAX_NAME_LEN)
+	{
+		for (measured_len = 0; data[measured_len] && measured_len < len;
+		     measured_len++)
+			;
+		if (!data[measured_len])
+		{
+			struct register_data *qdata =
+				malloc(sizeof(struct register_data));
+
+			if (qdata)
+			{
+				pthread_t thread_id;
+
+				qdata->seq = seq;
+				memcpy(qdata->name, data, measured_len + 1);
+				if (pthread_create(&thread_id, NULL,
+				    register_thread, qdata))
+				{
+					fprintf(stderr,
+						"thread creation failed, can't resolve name\n");
+					free(qdata);
+					goto nak;
+				}
+			}
+			else
+			{
+				fprintf(stderr, "alloc failed, can't resolve name\n");
+				goto nak;
+			}
+		}
+		else
+		{
+			fprintf(stderr, "query has unterminated name\n");
+			goto nak;
+		}
+	}
+	else
+	{
+		fprintf(stderr, "query has invalid name length %d\n",
+			len);
+		goto nak;
+	}
+	return;
+
+nak:
+	/* FIXME: nak the name register request */
+	return;
+}
+
 int main(int argc, const char *argv[])
 {
 	sock_fd = socket(PF_NETLINK, SOCK_DGRAM, NETLINK_NAME_ORIENTED_STACK);
@@ -257,6 +384,11 @@ int main(int argc, const char *argv[])
 					 NLMSG_DATA(nlh),
 					 NLMSG_PAYLOAD(nlh, 0));
 				break;
+			case NAME_STACK_REGISTER_QUERY:
+				do_register(nlh->nlmsg_seq,
+					 NLMSG_DATA(nlh),
+					 NLMSG_PAYLOAD(nlh, 0));
+				break;
 			default:
 				fprintf(stderr, "unhandled msg type %d\n",
 					nlh->nlmsg_type);
-- 
1.6.3.2

